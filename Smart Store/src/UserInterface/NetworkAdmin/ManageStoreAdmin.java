/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.NetworkAdmin;

import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.StoreAdminOrganization;
import Business.Role.StoreAdminRole;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Prasad
 */
public class ManageStoreAdmin extends javax.swing.JPanel {

    /**
     * Creates new form EnterpriseAdminCreation
     */
   
    JPanel userProcessContainer;
    Network network;
    ManageStoreAdmin(JPanel userProcessContainer, Network network) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.network = network;
        
        cityNameText.setText(network.getNetworkName());
        
         storeComboBox.removeAllItems();
      
       for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
            storeComboBox.addItem(e);
        }
      
        populateTable();
        
     
    }

    
    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) storeAdminTable.getModel();

        model.setRowCount(0);
        for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
         
            for ( Organization org : e.getOrganizationDirectory().getOrganizationList())
            {
                
                      if(org instanceof StoreAdminOrganization)
                      {
                         for (UserAccount userAccount : org.getUserAccountDirectory().getUserAccountList())
                         {
                         Object[] row = new Object[3];
                         row[0] = e;
                         row[1] = userAccount.getEmployee().getName();
                         row[2] = userAccount.getUsername();

                         model.addRow(row); 
                      }
                
                }
            }
        
        }
   }
     
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainHeader = new javax.swing.JLabel();
        cityNameText = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        storeAdminTable = new javax.swing.JTable();
        sideHeader = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        userNameTextField = new javax.swing.JTextField();
        createButton = new javax.swing.JButton();
        nameTextField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        backButton = new javax.swing.JButton();
        storeComboBox = new javax.swing.JComboBox();
        storeLabel = new javax.swing.JLabel();

        setBackground(java.awt.Color.white);

        mainHeader.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        mainHeader.setText("Store Admin Creation");

        cityNameText.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cityNameText.setText("jLabel2");

        storeAdminTable.setBackground(new java.awt.Color(204, 255, 153));
        storeAdminTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Store", "Store Admin Name", "UserName"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(storeAdminTable);

        sideHeader.setText("City:");

        jLabel1.setText("Name");

        jLabel2.setText("UserName");

        jLabel3.setText("Password");

        createButton.setText("Add New Admin");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        backButton.setText("<< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        storeComboBox.setBackground(new java.awt.Color(204, 255, 153));
        storeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        storeLabel.setText("Store");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(backButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(395, 395, 395)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(storeLabel))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userNameTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(storeComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(225, 225, 225))
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(sideHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cityNameText)
                .addGap(245, 245, 245)
                .addComponent(mainHeader)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(173, 173, 173))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(createButton)
                        .addGap(273, 273, 273))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sideHeader)
                    .addComponent(cityNameText)
                    .addComponent(mainHeader))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(storeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(storeLabel))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(30, 30, 30)
                        .addComponent(userNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(createButton)
                .addGap(1, 1, 1)
                .addComponent(backButton)
                .addGap(38, 38, 38))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {nameTextField, passwordField, userNameTextField});

    }// </editor-fold>//GEN-END:initComponents

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        // TODO add your handling code here:
        Organization org = null;
        if (nameTextField.getText().trim().matches("") || userNameTextField.getText().trim().matches("") || String.valueOf(passwordField.getPassword()).trim().matches("") )
        {  
          JOptionPane.showMessageDialog(null, "All fields are mandatory!!!", "Warning", JOptionPane.WARNING_MESSAGE);  
        } 
        else
        {    
         Enterprise et = (Enterprise) storeComboBox.getSelectedItem();
          if(et.getOrganizationDirectory().getOrganizationList().isEmpty())
         {
           org = et.getOrganizationDirectory().createOrganization(Organization.Type.StoreAdmin);  
         } 
         else
         {
         for(Organization o:et.getOrganizationDirectory().getOrganizationList())
         {
             if(o instanceof StoreAdminOrganization)
             {
                 org=o;
                 break;
             }
         }  
         
         }      
          if(org.getUserAccountDirectory().checkIfUsernameIsUnique(userNameTextField.getText())==false)
         {  
           JOptionPane.showMessageDialog(null, "This Username already exists. Please try with some other username!!!", "Warning", JOptionPane.WARNING_MESSAGE);
         }
        else
          {    
         Employee employee = org.getEmployeeDirectory().createEmployee(nameTextField.getText());
        
        org.getUserAccountDirectory().createUserAccount(userNameTextField.getText(),String.valueOf(passwordField.getPassword()), employee, new StoreAdminRole());
        JOptionPane.showMessageDialog(null, "Store Admin has been created!!!", "Information", JOptionPane.INFORMATION_MESSAGE);
        populateTable();
        nameTextField.setText("");
        userNameTextField.setText("");
        passwordField.setText("");
        }
        }   
    }//GEN-LAST:event_createButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel cityNameText;
    private javax.swing.JButton createButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel mainHeader;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel sideHeader;
    private javax.swing.JTable storeAdminTable;
    private javax.swing.JComboBox storeComboBox;
    private javax.swing.JLabel storeLabel;
    private javax.swing.JTextField userNameTextField;
    // End of variables declaration//GEN-END:variables
}
